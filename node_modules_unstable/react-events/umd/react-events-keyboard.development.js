/** @license React vundefined
 * react-events-keyboard.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
	typeof define === 'function' && define.amd ? define(['react'], factory) :
	(global.ReactEventsKeyboard = factory(global.React));
}(this, (function (React) { 'use strict';

var DiscreteEvent = 0;

var isArray = Array.isArray;
var targetEventTypes = ['keydown_active', 'keyup'];
var modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];
/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};
/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};

function isFunction(obj) {
  return typeof obj === 'function';
}

function getEventKey(nativeEvent) {
  var nativeKey = nativeEvent.key;

  if (nativeKey) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.
    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeKey] || nativeKey;

    if (key !== 'Unidentified') {
      return key;
    }
  }

  return translateToKey[nativeEvent.keyCode] || 'Unidentified';
}

function createKeyboardEvent(event, context, type, defaultPrevented) {
  var nativeEvent = event.nativeEvent;
  var altKey = nativeEvent.altKey,
      ctrlKey = nativeEvent.ctrlKey,
      isComposing = nativeEvent.isComposing,
      location = nativeEvent.location,
      metaKey = nativeEvent.metaKey,
      repeat = nativeEvent.repeat,
      shiftKey = nativeEvent.shiftKey;
  return {
    altKey: altKey,
    ctrlKey: ctrlKey,
    defaultPrevented: defaultPrevented,
    isComposing: isComposing,
    key: getEventKey(nativeEvent),
    location: location,
    metaKey: metaKey,
    repeat: repeat,
    shiftKey: shiftKey,
    target: event.target,
    timeStamp: context.getTimeStamp(),
    type: type
  };
}

function dispatchKeyboardEvent(event, listener, context, type, defaultPrevented) {
  var syntheticEvent = createKeyboardEvent(event, context, type, defaultPrevented);
  var shouldPropagate;

  var listenerWithReturnValue = function (e) {
    shouldPropagate = listener(e);
  };

  context.dispatchEvent(syntheticEvent, listenerWithReturnValue, DiscreteEvent);

  if (shouldPropagate) {
    context.continuePropagation();
  }
}

var keyboardResponderImpl = {
  targetEventTypes: targetEventTypes,
  onEvent: function (event, context, props) {
    var type = event.type;
    var nativeEvent = event.nativeEvent;

    if (props.disabled) {
      return;
    }

    var defaultPrevented = nativeEvent.defaultPrevented === true;

    if (type === 'keydown') {
      var preventKeys = props.preventKeys;

      if (!defaultPrevented && isArray(preventKeys)) {
        preventKeyLoop: for (var i = 0; i < preventKeys.length; i++) {
          var preventKey = preventKeys[i];
          var key = preventKey;

          if (isArray(preventKey)) {
            key = preventKey[0];
            var config = preventKey[1];

            for (var s = 0; s < modifiers.length; s++) {
              var modifier = modifiers[s];

              if (config[modifier] && !nativeEvent[modifier] || !config[modifier] && nativeEvent[modifier]) {
                continue preventKeyLoop;
              }
            }
          }

          if (key === getEventKey(nativeEvent)) {
            defaultPrevented = true;
            nativeEvent.preventDefault();
            break;
          }
        }
      }

      var onKeyDown = props.onKeyDown;

      if (isFunction(onKeyDown)) {
        dispatchKeyboardEvent(event, onKeyDown, context, 'keydown', defaultPrevented);
      }
    } else if (type === 'keyup') {
      var onKeyUp = props.onKeyUp;

      if (isFunction(onKeyUp)) {
        dispatchKeyboardEvent(event, onKeyUp, context, 'keyup', defaultPrevented);
      }
    }
  }
};
var KeyboardResponder = React.unstable_createResponder('Keyboard', keyboardResponderImpl);
function useKeyboard(props) {
  return React.unstable_useResponder(KeyboardResponder, props);
}

var Keyboard = Object.freeze({
	KeyboardResponder: KeyboardResponder,
	useKeyboard: useKeyboard
});

var keyboard = Keyboard;

return keyboard;

})));
